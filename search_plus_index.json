{"./":{"url":"./","title":"序言","keywords":"","body":"istio-handbook istio 开发指南 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"microservice/new-generation-microservices-architecture.html":{"url":"microservice/new-generation-microservices-architecture.html","title":"迎接新一代微服务架构","keywords":"","body":"迎接新一代微服务架构 微服务是近些年来软件架构中的热名词，也是一个很大的概念，不同人对它的理解都各不相同，甚至在早期微服务架构中出现了一批四不像的微服务架构产品，有人把单纯引入 Spring Boot、Spring Cloud 等框架的应用服务也称之为微服务架构，但这却只是将它作为服务的 Web 容器而已。 随着微服务的火热，越来越多的团队开始实践，将微服务纷纷落地，并投入生产。但随着微服务规模的不断壮大，每增加一个微服务，就可能会增加一些依赖的基础设施和第三方的配置，比如 Kafka 、Redis 实例等，相应 CI/CD 的配置也会增加或调整。 同时随着微服务数量增多、业务复杂性的提升及需求的多样性等（如，对接第三方异构系统等），服务间通信的错综复杂，一步步地将微服务变得更加臃肿，服务治理也是难上加难，而这些问题在单体架构中是很容易解决的。为此，有人开始怀疑当初微服务化是否是明智之选，甚至考虑回归到传统单体应用。 正如下图所示，PPT 中的微服务总是美好的，但现实中的微服务却是一团糟糕，想甩甩不掉，越看越糟心。难道就没有办法了么？ 图 2.1.1：现实中和PPT中的微服务对比 1、传统微服务架构面临的挑战 面对上述暴露出的问题，并在传统微服务架构下，经过实践的不断冲击，面临了更多新的挑战，综上所述，产生这些问题的原因有以下这几点： 过于绑定特定技术栈。 当面对异构系统时，需要花费大量精力来进行代码的改造，不同异构系统可能面临不同的改造。 代码侵入度过高。 开发者往往需要花费大量的精力来考虑如何与框架或 SDK 结合，并在业务中更好的深度融合，对于大部分开发者而言都是一个高曲线的学习过程。 多语言支持受限。 微服务提倡不同组件可以使用最适合它的语言开发，但是传统微服务框架，如 Spring Cloud 则是 Java 的天下，多语言的支持难度很大。这也就导致在面对异构系统对接时的无奈，或选择退而求其次的方案了。 老旧系统维护难。 面对老旧系统，很难做到统一维护、治理、监控等，在过度时期往往需要多个团队分而管之，维护难度加大。 上述这些问题在传统微服务架构中都是在所难免，我们都知道技术演进来源于实践中不断的摸索，将功能抽象、解耦、封装、服务化。 随着传统微服务架构暴露出的这些问题，将迎来新的挑战，让大家纷纷寻找其他解决方案。 2、迎来新一代微服务架构 为了解决传统微服务面临的问题，以应对全新的挑战，微服务架构也进一步演化，最终催生了Service Mesh 的出现，迎来了新一代微服务架构，也被称为“下一代微服务”。为了更好地理解 Service Mesh 的概念和存在的意义，我们来回顾一下这一演进过程。 1.1 耦合阶段 在微服务架构中，服务发现、负载均衡、熔断等能力是微服务架构中重要的组成部分。微服务化之后，服务更加的分散，复杂度变得更高，起初开发者将诸如熔断、超时等功能和业务代码封装在一起，使服务具备了网络管控的能力，如下图所示。 图 2.1.2：耦合阶段 这种方案虽然易于实现，但从设计角度来讲却存在一定的缺陷。 基础设施功能（如，服务发现，负载均衡、熔断等）和业务逻辑高度耦合。 每个微服务都重复实现了相同功能的代码。 管理困难。如果某个服务的负载均衡发生变化，则调用它的相关服务都需要更新变化。 开发者不能集中精力只关注于业务逻辑开发。 1.2 公共库 SDK 基于上面存在的问题，很容易会想到将基础设施功能设计为一个公共库 SDK，让服务的业务逻辑与这些公共功能降低耦合度，提高重复利用率，更重要的是开发者只需要关注公共库 SDK 的依赖及使用，而不必关注实现这些公共功能，从而更加专注于业务逻辑的开发，比如 Spring Cloud 框架是类似的方式。如下图所示： 图 2.1.3：公共库SDK阶段 实际上即便如此，它仍然有一些不足之处。 这些公共库 SDK 存在较为陡峭的学习成本，需要耗费开发人员一定的时间和人力与现有系统集成，甚至需要考虑修改现有代码进行整合。 这些公共库 SDK 一般都是通过特定语言实现，缺乏多语言的支持，在对现有系统整合时有一定的局限性。 公共库 SDK 的管理和维护依然需要耗费开发者的大量精力，并需专门人员来进行管理维护。 1.3 Sidecar 模式 有了上面公共库 SDK 的启发，加上跨语言问题、更新后的发布和维护等问题，人们发现更好的解决方案是把它作为一个代理，服务通过这个透明的代理完成所有流量的控制。 这就是典型的 Sidecar 代理模式，也被翻译为\"边车\"代理，它作为与其他服务通信的桥梁，为服务提供额外的网络特性，并与服务独立部署，对服务零侵入，更不会受限于服务的开发语言和技术栈，如下图所示。 图 2.1.4：Sidecar模式阶段 以 Sidecar 模式进行通信代理，实现了基础实施层与业务逻辑的完全隔离，在部署、升级时带来了便利，做到了真正的基础设施层与业务逻辑层的彻底解耦。另一方面，Sidecar 可以更加快速地为应用服务提供更灵活的扩展，而不需要应用服务的大量改造。Sidecar 可以实现以下主要功能： 服务注册。 帮助服务注册到相应的服务注册中心，并对服务做相关的健康检查。 服务路由。 当应用服务调用其它服务时，Sidecar 可以帮助从服务发现中找到相应的服务地址，完成服务路由功能。 服务治理。 Sidecar 可以完全拦截服务进出的流量，并对其进行相应的调用链跟踪、熔断、降级、日志监控等操作，将服务治理功能集中在 Sidecar 中实现。 集中管控。 整个微服务架构体系下的所有服务完全可以通过 Sidecar 来进行集中管控，完成对服务的流控、下线等。 于是，应用服务终于可以做到跨语言开发、并更专注于业务逻辑的开发。 1.4 Service Mesh 把 Sidecar 模式充分应用于一个庞大的微服务架构系统，为每个应用服务配套部署一个 Sidecar 代理，完成服务间复杂的通信，最终就会得到一个如下图所示的网络拓扑结构，这就是 Service Mesh，又称之为“服务网格“。 图 2.1.5：Service Mesh阶段 至此，迎来了新一代微服务架构——Service Mesh，它彻底解决了传统微服务架构所面临的问题。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 13:52:03 "},"servicemesh/introduction.html":{"url":"servicemesh/introduction.html","title":"Service Mesh 介绍","keywords":"","body":"Service Mesh 介绍 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"servicemesh/framework-contrast.html":{"url":"servicemesh/framework-contrast.html","title":"Service Mesh 框架对比","keywords":"","body":"Service Mesh 框架对比 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"architecture/istio-architecture.html":{"url":"architecture/istio-architecture.html","title":"Istio 整体架构","keywords":"","body":"Istio 整体架构 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"architecture/dataplane.html":{"url":"architecture/dataplane.html","title":"数据平面","keywords":"","body":"数据平面 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"architecture/controlplane.html":{"url":"architecture/controlplane.html","title":"控制平面","keywords":"","body":"控制平面 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"install/istio-install.html":{"url":"install/istio-install.html","title":"Istio 安装","keywords":"","body":"Istio 安装 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"install/istio-uninstall.html":{"url":"install/istio-uninstall.html","title":"Istio 卸载","keywords":"","body":"Istio 卸载 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"install/deployment-bookinfo-application.html":{"url":"install/deployment-bookinfo-application.html","title":"部署示例","keywords":"","body":"部署示例 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"install/istio-upgrade.html":{"url":"install/istio-upgrade.html","title":"升级","keywords":"","body":"升级 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-05 12:47:59 "},"traffic/config/":{"url":"traffic/config/","title":"资源配置","keywords":"","body":"资源配置 Istio 的流量管理是通过一系列的 CRD（Kubernetes 的自定义资源）来实现的，包括以下这些资源： VirtualService：虚拟服务，用来定义路由规则，控制请求如何被路由到某个服务。 DestinationRule：目标规则，用来配置请求策略。 Gateway：网关，在网格的入口设置负载、控制流量等。 ServiceEntry：服务入口，用来定义外部如何访问服务网格。 EnvoyFilter： Sidecar： Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/virtual-service.html":{"url":"traffic/config/virtual-service.html","title":"VirtualService","keywords":"","body":"VirtualService VirtualService 与 DestinationRule 是流量控制最关键的两个自定义资源。在 VirtualService 中定义了一组路由规则，当流量进入时，逐个规则进行匹配，直到匹配成功后将流量转发给指定的路由地址。 图 6.1.1.1：VirtualService流程图 示例 （以 Bookinfo 示例，将 Reviews 服务路由到v1版本） apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata: name: reviews spec: hosts: - reviews http: - route: - destination: host: reviews subset: v1 --- apiVersion: networking.istio.io/v1alpha3 kind: DestinationRule metadata: name: reviews spec: host: reviews subsets: - name: v1 labels: version: v1 配置项说明： hosts：用来配置下游访问的可寻址地址。配置一个 String[] 类型的值，可以配置多个。指定了发送流量的目标主机， 可以使用FQDN（Fully Qualified Domain Name - 全限定域名）或者短域名， 也可以一个前缀匹配的域名格式或者一个具体的 IP 地址。 match：这部分用来配置路由规则，通常情况下配置一组路由规则，当请求到来时，自上而下依次进行匹配，直到匹配成功后跳出匹配。它可以对请求的 uri、method、authority、headers、port、queryParams 以及是否对 uri 大小写敏感等进行配置。 route：用来配置路由转发目标规则，可以指定需要访问的 subset （服务子集），同时可以对请求权重进行设置、对请求头、响应头中数据进行增删改等操作。subset （服务子集）是指同源服务而不同版本的 Pod，通常在 Deployment 资源中设置不同的 label 来标识。 更多详细配置项说明参考：https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/#VirtualService Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/destination-rule.html":{"url":"traffic/config/destination-rule.html","title":"DestinationRule","keywords":"","body":"DestinationRule DestinationRule 是 Istio 中定义的另外一个比较重要的资源，它定义了网格中某个 Service 对外提供服务的策略及规则，包括负载均衡策略、异常点检测、熔断控制、访问连接池等。 负载均衡策略支持简单的负载策略（ROUND_ROBIN、LEAST_CONN、RANDOM、PASSTHROUGH）、一致性 Hash 策略和区域性负载均衡策略。 异常点检测配置在服务连续返回了5xx的错误时进行及时的熔断保护，避免引起雪崩效应。DestinationRule 也可以同 VirtualService 配合使用实现对同源服务不同子集服务的访问配置。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/gateway.html":{"url":"traffic/config/gateway.html","title":"Gateway","keywords":"","body":"Gateway Gateway，一个运行在网格边缘的负载均衡器，定义了所有 HTTP/TCP 流量进出服务网格的统一进出口。它描述了一组对外公开的端口、协议、负载均衡、以及 SNI 配置。 Istio Gateway 包括 Ingress Gateway 与 Egress Gateway，分别用来配置网格的入口流量与出口流量。Ingress Gateway 使用 istio-ingressgateway 负载均衡器来代理流量，而 istio-ingressgateway 实际上是一个 Envoy 代理。 图 6.1.3.1：Gateway流程图 示例 一个简单示例如下： apiVersion: networking.istio.io/v1alpha3 kind: Gateway metadata: name: my-gateway namespace: some-config-namespace spec: selector: app: my-gateway-controller servers: - port: number: 80 name: http protocol: HTTP hosts: - uk.bookinfo.com - eu.bookinfo.com tls: httpsRedirect: true # sends 301 redirect for http requests - port: number: 443 name: https-443 protocol: HTTPS hosts: - uk.bookinfo.com - eu.bookinfo.com tls: mode: SIMPLE # enables HTTPS on this port serverCertificate: /etc/certs/servercert.pem privateKey: /etc/certs/privatekey.pem - port: number: 9443 name: https-9443 protocol: HTTPS hosts: - \"bookinfo-namespace/*.bookinfo.com\" tls: mode: SIMPLE # enables HTTPS on this port credentialName: bookinfo-secret # fetches certs from Kubernetes secret - port: number: 9080 name: http-wildcard protocol: HTTP hosts: - \"ns1/*\" - \"ns2/foo.bar.com\" - port: number: 2379 # to expose internal service via external port 2379 name: mongo protocol: MONGO hosts: - \"*\" 该示例中， Gateway 被引用在 some-config-namespace 这个 Namespace 下，并使用 label my-gateway-controller 来关联部署网络代理的 Pod ，对外公开了 80、443、9443、9080、2379 端口的服务。 80 端口：附属配置的 host 为uk.bookinfo.com，eu.bookinfo.com，同时在 tls 中配置了 httpsRedirect。如果使用 HTTP1.1 协议访问将会返回 301，要求使用 HTTPS 访问，通过这种配置变相的禁止了对 uk.bookinfo.com，eu.bookinfo.com 域名的 HTTP1.1 协议的访问入口。 443 端口：提供TLS/HTTPS 的访问，表示接受 uk.bookinfo.com，eu.bookinfo.com 域名的 HTTPS 协议的访问，protocol 属性指定了协议类型。在 tls 的配置中指定了会话模式为单向 TLS（mode: SIMPLE） ，同时指定了服务端证书和私钥的存放地址。 9443 端口：提供TLS/HTTPS 的访问，与 443 端口不同的是证书不是指定存放证书文件的地址，而是通过 credentialName 属性配置从 Kubernetes 的证书管理中心拉取证书。 9080 端口：提供简单的 HTTP1.1 协议的访问。 hosts 中配置了 ns1/* 与 ns2/foo.bar.com，表示只允许ns1 Namespace 下的 VirtualService 绑定它以及 ns2 Namespace下配置了 host 为 foo.bar.com 的 VirtualService 绑定它。 2379 端口：提供 MONGO 协议的访问，允许所有 host 绑定它。 Egress Gateway 提供了对网格的出口流量进行统一管控的功能，在安装 Istio 时默认是不开启的。可以使用以下命令查看是否开启： kubectl get pod -l istio=egressgateway -n istio-system 若没有开启，使用以下命令添加。 istioctl manifest apply --set values.global.istioNamespace=istio-system \\ --set values.gateways.istio-egressgateway.enabled=true Egress Gateway 的一个简单示例如下： apiVersion: networking.istio.io/v1alpha3 kind: Gateway metadata: name: istio-egressgateway spec: selector: istio: egressgateway servers: - port: number: 80 name: http protocol: HTTP hosts: - edition.cnn.com 可以看出，与 Ingress Gateway不同，Egress Gateway 使用有 istio: egressgateway 标签的 Pod 来代理流量，实际上这是一个 Envoy 代理。当网格内部需要访问 edition.cnn.com 这个地址时，流量将会统一先转发到 Egress Gateway 上，再由 Egress Gateway 将流量转发到 edition.cnn.com 上。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/service-entry.html":{"url":"traffic/config/service-entry.html","title":"ServiceEntry","keywords":"","body":"ServiceEntry ServiceEntry ，将网格外的服务注册到 Istio 的注册表中，这样就可以把外部服务当做网格内部的服务一样进行管理和操作。包括服务发现、路由控制等，在 ServiceEntry 中可以配置 hosts，vips，ports，protocols，endpoints等。 图 6.1.4.1：ServiceEntry流程图 示例 它的一个简单示例如下： apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry metadata: name: external-svc-https spec: hosts: - api.dropboxapi.com - www.googleapis.com - api.facebook.com location: MESH_EXTERNAL ports: - number: 443 name: https protocol: TLS resolution: DNS 该示例中，定义了在网格内部使用 HTTPS 协议访问外部的几个服务的配置。通过上面配置，网格内部的服务就可以把 api.dropboxapi.com，www.googleapis.com, www.googleapis.com 这几个外部的服务当做网格内部服务去访问。MESH_EXTERNAL 表示是网格外服务，该参数会影响到服务间调用的 mTLS 认证、策略执行等。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/envoy-filter.html":{"url":"traffic/config/envoy-filter.html","title":"EnvoyFilter","keywords":"","body":"EnvoyFilter Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"traffic/config/sidecar.html":{"url":"traffic/config/sidecar.html","title":"Sidecar","keywords":"","body":"Sidecar 默认情况下，Istio 让每个 Envoy 代理都可以访问来自和它关联的应用服务的所有端口请求，然后转发到对应的应用服务。而通过 Sidecar 资源配置可以做更多的事情，如： 调整 Envoy 代理接受的端口和协议集。 限制 Envoy 代理可以访问的服务集合。 例如，下面的 Sidecar 配置将 bookinfo 命名空间中的所有服务配置为仅能访问运行在相同命名空间和 Istio 控制平面中的服务： apiVersion: networking.istio.io/v1alpha3 kind: Sidecar metadata: name: default namespace: bookinfo spec: egress: - hosts: - \"./*\" - \"istio-system/*\" Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:54:14 "},"extensibility/extending-envoy-proxy-with-webassembly.html":{"url":"extensibility/extending-envoy-proxy-with-webassembly.html","title":"基于 WASM 扩展 Envoy","keywords":"","body":"基于 WASM 扩展 Envoy Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:56:56 "},"integration/consul/integration-consul.html":{"url":"integration/consul/integration-consul.html","title":"集成 Consul","keywords":"","body":"集成 Consul Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-09-20 08:56:56 "}}